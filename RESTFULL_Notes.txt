1 RESTFULL
1) REST的核心原则是将你的API拆分为逻辑上的资源。这些资源通过http被操作（GET ,POST,PUT,DELETE)

A 每一个URI代表一种资源；
B 客户端和服务器之间，传递这种资源的某种表现层；
C 客户端通过四个HTTP动词，对服务器端资源进行操作，实现"表现层状态转化"。GET 查询 POST 修改 PUT 增加  DELETE 删除

2) API设计基本要求：API就是程序员的UI，和其他UI一样，要考虑用户体验
   当标准合理的时候遵守标准。
   API应该对程序员友好，并且在浏览器地址栏容易输入。
   API应该简单，直观，容易使用的同时优雅。
   API应该具有足够的灵活性来支持上层UI。
   API设计权衡上述几个原则

3) 用REST的好处在于可以充分利用http的强大实现对资源的CURD功能,只需要一个endpoint.
即使你的内部数据模型和资源已经有了很好的对应，API设计的时候你仍然不需要把它们一对一的都暴露出来。
这里的关键是隐藏内部资源，暴露必需的外部资源。

4）不符合CRUD的操作：A 重构 B 以资资源对应 C文档写清楚

5) 永远使用SSL(Secure Sockets Layer 安全套接层).使用SSL可以减少鉴权的成本：你只需要一个简单的令牌（token）就可以鉴权了，
而不是每次让用户对每次请求签名。值得注意的是：不要让非SSL的url访问重定向到SSL的url

6) 版本化：url里面有主版本信息，同时请求头俩面有子版本信息。这样在子版本变化过程中url的稳定的。变化有时是不可避免的，
关键是如何管理变化。完整的文档和合理的时间表都会使得API使用者使用的更加轻松。

7）url最好越简短越好，和结果过滤，排序，搜索相关的功能都应该通过参数实现(并且也很容易实现)

8) 限制API返回的值。有时候API使用者不需要所有的结果，在进行横向限制的时候（例如值返回API结果的前十项）还应该可以进行纵向限制。

9) 更新和创建操作应该返回资源.为了防止用户多次的API调用（为了进行此次的更新操作），我们应该会返回更新的资源（updated representation.）

10)只提供json作为返回格式

11) 命名方式建议采取蛇形命令，也可用驼峰

12) 默认使用pretty print格式，使用gzip

13）有两种情况是应该使用envelope的。如果API使用者确实无法访问返回头，或者API需要支持交叉域请求（通过jsonp）。

14）在post,put,patch上使用json作为输入：当然如果API本身就很简单，那么使用url格式的输入没什么问题。但对于复杂的API你应该使用json。
或者干脆统一使用json。注意使用json传输的时候，要求请求头里面加入：Content-Type：applicatin/json.否则抛出415异常（unsupported media type）。

15） 分页：分页数据可以放到“信封”里面，但随着标准的改进，现在我推荐将分页信息放到link header里面：http://tools.ietf.org/html/rfc5988#page-6。
使用link header的API应该返回一系列组合好了的url而不是让用户自己再去拼。这点在基于游标的分页中尤为重要

16） 自动加载相关的资源
很多时候，自动加载相关资源非常有用，可以很大的提高效率。但是这却和RESTful的原则相背。为了如此，我们可以在url中添加参数：embed（或者expend）。embed可以是一个逗号分隔的串，例如：
GET /ticket/12embed=customer.name,assigned_user

17)重写HTTP方法
有的客户端只能发出简单的GET 和POST请求。为了照顾他们，我们可以重写HTTP请求。这里没有什么标准，但是一个普遍的方式是接受X-HTTP-Method-Override请求头。

18）速度限制
为了避免请求泛滥，给API设置速度限制很重要。为此 RFC 6585 引入了HTTP状态码429（too many requests）。加入速度设置之后，应该提示用户，至于如何提示标准上没有说明，不过流行的方法是使用HTTP的返回头。

下面是几个必须的返回头（依照twitter的命名规则）：

X-Rate-Limit-Limit :当前时间段允许的并发请求数
X-Rate-Limit-Remaining:当前时间段保留的请求数。
X-Rate-Limit-Reset:当前时间段剩余秒数

19)为什么使用当前时间段剩余秒数而不是时间戳
时间戳保存的信息很多，但是也包含了很多不必要的信息，用户只需要知道还剩几秒就可以再发请求了这样也避免了clock skew问题。
HTTP 已经规定了使用 RFC 1123 时间格式

20)缓存
HTTP提供了自带的缓存框架。你需要做的是在返回的时候加入一些返回头信息，在接受输入的时候加入输入验证。基本两种方法：

ETag：当生成请求的时候，在HTTP头里面加入ETag，其中包含请求的校验和和哈希值，这个值和在输入变化的时候也应该变化。如果输入的HTTP请求包含IF-NONE-MATCH头以及一个ETag值，那么API应该返回304 not modified状态码，而不是常规的输出结果。

Last-Modified：和etag一样，只是多了一个时间戳。返回头里的Last-Modified：包含了 RFC 1123 时间戳，它和IF-MODIFIED-SINCE一致。HTTP规范里面有三种date格式，服务器应该都能处理。

21）出错处理
就像html错误页面能够显示错误信息一样，API 也应该能返回可读的错误信息–它应该和一般的资源格式一致。API应该始终返回相应的状态码，以反映服务器或者请求的状态。API的错误码可以分为两部分，400系列和500系列，400系列表明客户端错误：如错误的请求格式等。500系列表示服务器错误。API应该至少将所有的400系列的错误以json形式返回。
Json格式的错误应该包含以下信息：一个有用的错误信息，一个唯一的错误码，以及任何可能的详细错误描述

HTTP 状态码
 200 ok  - 成功返回状态，对应，GET,PUT,PATCH,DELETE.
 201 created  - 成功创建。
 304 not modified   - HTTP缓存有效。
 400 bad request   - 请求格式错误。
 401 unauthorized   - 未授权。
 403 forbidden   - 鉴权成功，但是该用户没有权限。
 404 not found - 请求的资源不存在
 405 method not allowed - 该http方法不被允许。
 410 gone - 这个url对应的资源现在不可用。
 415 unsupported media type - 请求类型错误。
 422 unprocessable entity - 校验错误时用。
 429 too many request - 请求过多。
